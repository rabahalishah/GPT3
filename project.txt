
--------------------File structure
npm install react-icons

In src folder:
index.js
App.js
App.css
components (folder)
assets (folder)

In components folder:
Component.jsx
component.css

-----------------------

//In index.js:
import React from "react";
import ReactDOM from "react-dom";
import App from "./App";

import React from "react";
import ReactDOM from "react-dom";
import App from "./App";

// ReactDOM.render(<App />, document.getElementById("root"));

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


-------------------------App.css
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  scroll-behavior: smooth;
}

body {
  background: var(--color-bg);
}

a {
    color: unset;
    text-decoration: none;
}


//This must be constant in all files
// var(--my-color) creates a variable 
If in other css file

--my-color: red; then var(--my-color) would display red color

---------------Gradients

https://angrytools.com/gradient/


------------animations
https://animista.net

----------Font
font-family: 'Manrope', sans-serif;

-----------------Setting values of variables globally

This is how you set the values of variable for css globally


@import url('https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800&display=swap');

:root {
  --font-family: 'Manrope', sans-serif;

  --gradient-text: linear-gradient(89.97deg, #AE67FA 1.84%, #F49867 102.67%);
  --gradient-bar: linear-gradient(103.22deg, #AE67FA -13.86%, #F49867 99.55%);
  
  --color-bg: #040C18;
  --color-footer : #031B34;
  --color-blog: #042c54;
  --color-text: #81AFDD;
  --color-subtext: #FF8A71;
}

----------------------Break points for responsive designs

This is how you set you break points in css for responsive designs 

@media screen and (max-width: 1050px) {
  .gpt3__navbar-links_container {
    display: none;
  }
  .gpt3__navbar-menu {
    display: flex;
  }
}
@media screen and (max-width: 700px) {
  .gpt3__navbar {
    padding: 2rem 4rem;
  }
}
@media screen and (max-width: 550px) {
  .gpt3__navbar {
    padding: 2rem;
  }
}

-------------------CSS

.container {
  display: flex;
}

.item {
  flex: 1;
}

flex-grow: This property defines how much the flex item can grow relative to other flex items in the same container. It takes a unitless value, which represents a proportionate share of the available space. In the case of flex: 1, it means that the flex item will take up all available space along the main axis, causing it to expand and fill the container.

flex-shrink and flex-basis: When using flex: 1, these properties are implied as flex-shrink: 1 and flex-basis: 0%. flex-shrink defines how the item should shrink relative to other flex items if the container is too small to accommodate all the items' content.

In summary, flex: 1 is a convenient way to make a flex item fill the available space along the main axis and distribute the extra space among other flex items if needed.

----------------------Iterating over components array
const featuresData = [
  {
    title: "Improving end distrusts instantly ",
    text: "From they fine john he give of rich he. They age and draw mrs like. Improving end distrusts may instantly was household applauded.",
  },
  {
    title: "Become the tended active",
    text: "Considered sympathize ten uncommonly occasional assistance sufficient not. Letter of on become he tended active enable to.",
  },
  {
    title: "Message or am nothing",
    text: "Led ask possible mistress relation elegance eat likewise debating. By message or am nothing amongst chiefly address.",
  },
  {
    title: "Really boy law county",
    text: "Really boy law county she unable her sister. Feet you off its like like six. Among sex are leave law built now. In built table in an rapid blush.",
  },
];

<div className="gpt3__features-container">
        {featuresData.map((item, index) => (
          <Feature title={item.title} text={item.text} key={item.title + index}/>
        ))}
      </div>


///This is how you render a component by iterating.
// Note that map functions return and item in an array along with its index.



----------------------Important css classes
.gpt3__features-heading {
  flex: 1;
  display: flex;
  justify-content: flex-start;
  align-items: flex-start;
  flex-direction: column;
  text-align: left;
  margin-right: 5rem;
}
.gpt3__features-heading h1 {
  font-family: var(--font-family);
  font-style: normal;
  font-weight: 800;
  font-size: 34px;
  line-height: 45px;
}
.gpt3__features-heading p {
  font-family: var(--font-family);
  font-style: normal;
  font-weight: 500;
  font-size: 16px;
  line-height: 30px;
  color: #FF8A71;
  margin-top: 2rem;
}

//These are some important and most frequently used css classes in this project

--------------------------Dealing with grid
display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 2rem;

//these three are also some important grid properties.

-----------------------------Classes which is applied to the container of every component
.section__padding {
    padding: 4rem;
  }
  .section__margin {
    margin: 4rem;
  }